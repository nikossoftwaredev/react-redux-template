import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import axios from "axios";

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const apiPOST = createAsyncThunk(
  "api/post",
  async (path, data, thunkAPI) => {
    try {
      const response = await axios.post(`/${path}`, data);
      return await response.json();
    } catch (error) {
      return thunkAPI.rejectWithValue({ error: error.message });
    }
  }
);

export const apiGET = createAsyncThunk("api/get", async (path, thunkAPI) => {
  try {
    const response = await axios.get(
      `https://jsonplaceholder.typicode.com/${path}`
    );

    return await response.data;
  } catch (error) {
    return thunkAPI.rejectWithValue({ error: error.message });
  }
});

export const apiPUT = createAsyncThunk(
  "api/put",
  async (path, data, thunkAPI) => {
    try {
      const response = await axios.put(`${path}`, data);
      return response.data;
    } catch (error) {
      return thunkAPI.rejectWithValue({ error: error.message });
    }
  }
);

export const apiDELETE = createAsyncThunk("api/get", async (path, thunkAPI) => {
  try {
    const response = await axios.delete(`${path}`);
    return response.data;
  } catch (error) {
    return thunkAPI.rejectWithValue({ error: error.message });
  }
});

export const apiSlice = createSlice({
  name: "api",
  initialState: {},
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(apiGET.pending, (state, { meta }) => {
        const { arg } = meta;
        state[arg] = {};
        state[arg].status = "fetching";
      })
      .addCase(apiGET.fulfilled, (state, { payload, meta }) => {
        const { arg } = meta;

        state[arg].status = "done";
        state[arg].data = {
          ...state[arg],
          ...payload,
        };
      });
  },
});

export const { increment, decrement, incrementByAmount } = apiSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const getApiResource = (state, path) => state.api[path];

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const incrementIfOdd = (amount) => (dispatch, getState) => {
  const currentValue = getApiResource(getState());
  if (currentValue % 2 === 1) {
    dispatch(incrementByAmount(amount));
  }
};

export default apiSlice.reducer;
